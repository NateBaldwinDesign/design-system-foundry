{
  "schemaVersion": "5.0.0",
  "profile": "basic",
  "metadata": {
    "name": "Simple design system Algorithm Collection",
    "description": "Algorithm collection for Simple design system",
    "version": "1.0.0",
    "author": "Design System Manager"
  },
  "config": {
    "systemVariables": [
      {
        "id": "system-variable-a3dc1aed-64eb-40d9-9974-a36067b54155",
        "name": "viewportWidth",
        "type": "number",
        "defaultValue": "",
        "description": "",
        "modeBased": true,
        "modeValues": {
          "modeId-653c36c5-649f-404b-baf2-cf5279ddd06f": "320",
          "modeId-f56d50e4-446f-49df-9488-6274c40e0877": "760",
          "modeId-58823f28-08da-40d0-88ff-3063166853ff": "1200"
        },
        "dimensionId": "dimensionId-146f111c-de78-41e4-95ac-cb124df72d24"
      },
      {
        "id": "system-variable-663c3dd5-44b9-43b4-bf40-962f20265159",
        "name": "Text size index",
        "type": "number",
        "defaultValue": "1",
        "description": "",
        "modeBased": true,
        "modeValues": {
          "modeId-1370163a-e968-424d-a7a8-cc8d8ca0941b": "-1",
          "modeId-c5afb449-ed81-4e2f-a19b-994e48b10d49": "1",
          "modeId-8d68586f-5843-45e9-b65d-ea4dd24cc817": "0"
        },
        "dimensionId": "dimensionId-ce308d40-ddc6-414d-bc4f-6f76ff9123a9"
      }
    ],
    "defaultBaseValue": 16,
    "defaultRatio": 1.25,
    "defaultSpacing": 4,
    "baseMultiplier": 14,
    "baseRatio": 1.125,
    "progressiveRatio": 1.0125,
    "maxRatio": 1.125
  },
  "algorithms": [
    {
      "id": "progressive-size-algorithm",
      "name": "Progressive Size Algorithm",
      "description": "Generates size values using progressive scaling based on position and zoom factors",
      "resolvedValueTypeId": "color",
      "variables": [
        {
          "id": "p",
          "name": "Position Array",
          "type": "string",
          "defaultValue": "[-2, -1, 0, 1, 2]",
          "description": "Array of position values"
        },
        {
          "id": "z",
          "name": "Zoom Array",
          "type": "string",
          "defaultValue": "[-4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8]",
          "description": "Array of zoom values"
        },
        {
          "id": "n",
          "name": "Index",
          "type": "number",
          "defaultValue": "0",
          "description": "Current iteration index"
        }
      ],
      "formulas": [
        {
          "id": "p_s-calculation",
          "name": "Position + Zoom",
          "description": "Calculate combined position and zoom factor",
          "expressions": {
            "latex": {
              "value": "p_s = p[n] + z[n]"
            },
            "javascript": {
              "value": "p_s = p[n] + z[n]",
              "metadata": {
                "allowedOperations": [
                  "math"
                ]
              }
            },
            "ast": {
              "type": "binary",
              "operator": "+",
              "left": {
                "type": "function",
                "functionName": "arrayAccess",
                "arguments": [
                  {
                    "type": "variable",
                    "variableName": "p",
                    "metadata": {
                      "astVersion": "1.0.0",
                      "validationErrors": [],
                      "complexity": "low"
                    }
                  },
                  {
                    "type": "variable",
                    "variableName": "n",
                    "metadata": {
                      "astVersion": "1.0.0",
                      "validationErrors": [],
                      "complexity": "low"
                    }
                  }
                ],
                "metadata": {
                  "astVersion": "1.0.0",
                  "validationErrors": [],
                  "complexity": "low"
                }
              },
              "right": {
                "type": "function",
                "functionName": "arrayAccess",
                "arguments": [
                  {
                    "type": "variable",
                    "variableName": "z",
                    "metadata": {
                      "astVersion": "1.0.0",
                      "validationErrors": [],
                      "complexity": "low"
                    }
                  },
                  {
                    "type": "variable",
                    "variableName": "n",
                    "metadata": {
                      "astVersion": "1.0.0",
                      "validationErrors": [],
                      "complexity": "low"
                    }
                  }
                ],
                "metadata": {
                  "astVersion": "1.0.0",
                  "validationErrors": [],
                  "complexity": "low"
                }
              },
              "metadata": {
                "astVersion": "1.0.0",
                "validationErrors": [],
                "complexity": "low"
              }
            }
          },
          "variableIds": [
            "p",
            "z",
            "n"
          ]
        },
        {
          "id": "base-calculation",
          "name": "Base Size",
          "description": "Calculate base size using exponential scaling",
          "expressions": {
            "latex": {
              "value": "b = 14 \\cdot 1.125^p_s"
            },
            "javascript": {
              "value": "b = 14 * 1.125^p_s",
              "metadata": {
                "allowedOperations": [
                  "math"
                ]
              }
            },
            "ast": {
              "type": "assignment",
              "variableName": "b",
              "expression": {
                "type": "binary",
                "operator": "^",
                "left": {
                  "type": "binary",
                  "operator": "*",
                  "left": {
                    "type": "literal",
                    "value": 14
                  },
                  "right": {
                    "type": "literal",
                    "value": 1.125
                  }
                },
                "right": {
                  "type": "variable",
                  "variableName": "p_s"
                }
              },
              "metadata": {
                "astVersion": "1.0.0",
                "validationErrors": [],
                "complexity": "medium"
              }
            }
          },
          "variableIds": [
            "p_s"
          ]
        },
        {
          "id": "normalization-calculation",
          "name": "Zoom Normalization",
          "description": "Normalize zoom value to 0-1 range",
          "expressions": {
            "latex": {
              "value": "c = \\frac{z[n] - z_{min}}{z_{max} - z_{min}}"
            },
            "javascript": {
              "value": "c = (z[n] - Math.min(...z)) / (Math.max(...z) - Math.min(...z))",
              "metadata": {
                "allowedOperations": [
                  "math"
                ]
              }
            },
            "ast": {
              "type": "binary",
              "operator": "-",
              "left": {
                "type": "literal",
                "value": "(z[n]",
                "metadata": {
                  "astVersion": "1.0.0",
                  "validationErrors": [
                    "Complex expression not fully parsed: (z[n]"
                  ],
                  "complexity": "high"
                }
              },
              "right": {
                "type": "binary",
                "operator": "/",
                "left": {
                  "type": "function",
                  "functionName": "Math.min",
                  "arguments": [
                    {
                      "type": "function",
                      "functionName": "spread",
                      "arguments": [
                        {
                          "type": "variable",
                          "variableName": "z",
                          "metadata": {
                            "astVersion": "1.0.0",
                            "validationErrors": [],
                            "complexity": "low"
                          }
                        }
                      ],
                      "metadata": {
                        "astVersion": "1.0.0",
                        "validationErrors": [],
                        "complexity": "low"
                      }
                    }
                  ],
                  "metadata": {
                    "astVersion": "1.0.0",
                    "validationErrors": [],
                    "complexity": "medium"
                  }
                },
                "right": {
                  "type": "function",
                  "functionName": "Math.max",
                  "arguments": [
                    {
                      "type": "function",
                      "functionName": "spread",
                      "arguments": [
                        {
                          "type": "variable",
                          "variableName": "z",
                          "metadata": {
                            "astVersion": "1.0.0",
                            "validationErrors": [],
                            "complexity": "low"
                          }
                        }
                      ],
                      "metadata": {
                        "astVersion": "1.0.0",
                        "validationErrors": [],
                        "complexity": "low"
                      }
                    }
                  ],
                  "metadata": {
                    "astVersion": "1.0.0",
                    "validationErrors": [],
                    "complexity": "medium"
                  }
                },
                "metadata": {
                  "astVersion": "1.0.0",
                  "validationErrors": [],
                  "complexity": "low"
                }
              },
              "metadata": {
                "astVersion": "1.0.0",
                "validationErrors": [],
                "complexity": "low"
              }
            }
          },
          "variableIds": [
            "z",
            "n"
          ]
        },
        {
          "id": "ratio-calculation",
          "name": "Progressive Ratio",
          "description": "Calculate progressive ratio based on normalized zoom",
          "expressions": {
            "latex": {
              "value": "r = 1.0125 \\times (1 - c) + 1.125 \\times c"
            },
            "javascript": {
              "value": "r = 1.0125 * (1 - c) + 1.125 * c",
              "metadata": {
                "allowedOperations": [
                  "math"
                ]
              }
            },
            "ast": {
              "type": "binary",
              "operator": "+",
              "left": {
                "type": "binary",
                "operator": "-",
                "left": {
                  "type": "binary",
                  "operator": "*",
                  "left": {
                    "type": "literal",
                    "value": 1.0125,
                    "metadata": {
                      "astVersion": "1.0.0",
                      "validationErrors": [],
                      "complexity": "low"
                    }
                  },
                  "right": {
                    "type": "literal",
                    "value": "(1",
                    "metadata": {
                      "astVersion": "1.0.0",
                      "validationErrors": [
                        "Complex expression not fully parsed: (1"
                      ],
                      "complexity": "high"
                    }
                  },
                  "metadata": {
                    "astVersion": "1.0.0",
                    "validationErrors": [],
                    "complexity": "low"
                  }
                },
                "right": {
                  "type": "literal",
                  "value": "c)",
                  "metadata": {
                    "astVersion": "1.0.0",
                    "validationErrors": [
                      "Complex expression not fully parsed: c)"
                    ],
                    "complexity": "high"
                  }
                },
                "metadata": {
                  "astVersion": "1.0.0",
                  "validationErrors": [],
                  "complexity": "low"
                }
              },
              "right": {
                "type": "binary",
                "operator": "*",
                "left": {
                  "type": "literal",
                  "value": 1.125,
                  "metadata": {
                    "astVersion": "1.0.0",
                    "validationErrors": [],
                    "complexity": "low"
                  }
                },
                "right": {
                  "type": "variable",
                  "variableName": "c",
                  "metadata": {
                    "astVersion": "1.0.0",
                    "validationErrors": [],
                    "complexity": "low"
                  }
                },
                "metadata": {
                  "astVersion": "1.0.0",
                  "validationErrors": [],
                  "complexity": "low"
                }
              },
              "metadata": {
                "astVersion": "1.0.0",
                "validationErrors": [],
                "complexity": "low"
              }
            }
          },
          "variableIds": [
            "c"
          ]
        },
        {
          "id": "final-size-calculation",
          "name": "Final Size",
          "description": "Calculate final size using progressive scaling",
          "expressions": {
            "latex": {
              "value": "s = b \\cdot r^n"
            },
            "javascript": {
              "value": "s = b * r^n",
              "metadata": {
                "allowedOperations": [
                  "math"
                ]
              }
            },
            "ast": {
              "type": "assignment",
              "variableName": "s",
              "expression": {
                "type": "binary",
                "operator": "^",
                "left": {
                  "type": "binary",
                  "operator": "*",
                  "left": {
                    "type": "variable",
                    "variableName": "b"
                  },
                  "right": {
                    "type": "variable",
                    "variableName": "r"
                  }
                },
                "right": {
                  "type": "variable",
                  "variableName": "n"
                }
              },
              "metadata": {
                "astVersion": "1.0.0",
                "validationErrors": [],
                "complexity": "medium"
              }
            }
          },
          "variableIds": [
            "b",
            "r",
            "n"
          ]
        }
      ],
      "conditions": [
        {
          "id": "validate-arrays",
          "name": "Validate Input Arrays",
          "expression": "Array.isArray(p)&&Array.isArray(z)&&p.length > 0&&z.length > 0",
          "variableIds": [
            "p",
            "z"
          ]
        },
        {
          "id": "validate-index",
          "name": "Validate Index Range",
          "expression": "n>=0&&n < Math.min(p.length,z.length)",
          "variableIds": [
            "n",
            "p",
            "z"
          ]
        }
      ],
      "steps": [
        {
          "type": "condition",
          "id": "validate-arrays",
          "name": "Validate Input Arrays"
        },
        {
          "type": "condition",
          "id": "validate-index",
          "name": "Validate Index Range"
        },
        {
          "type": "formula",
          "id": "p_s-calculation",
          "name": "Calculate Position + Zoom"
        },
        {
          "type": "formula",
          "id": "base-calculation",
          "name": "Calculate Base Size"
        },
        {
          "type": "formula",
          "id": "normalization-calculation",
          "name": "Calculate Zoom Normalization"
        },
        {
          "type": "formula",
          "id": "ratio-calculation",
          "name": "Calculate Progressive Ratio"
        },
        {
          "type": "formula",
          "id": "final-size-calculation",
          "name": "Calculate Final Size"
        }
      ]
    },
    {
      "id": "minimal-typescale-algorithm",
      "name": "Responsive Typography Scale Algorithm",
      "description": "Calculates font size based on modular scale for minimal example",
      "resolvedValueTypeId": "font-size",
      "variables": [
        {
          "id": "var_base",
          "name": "Base",
          "type": "number",
          "defaultValue": "14",
          "description": "Base font size"
        },
        {
          "id": "var_ratio",
          "name": "Ratio",
          "type": "number",
          "defaultValue": "1.125",
          "description": "Modular scale ratio"
        },
        {
          "id": "variable-35b22c3d-327f-42cb-a0c0-c1458935c804",
          "name": "minWidth",
          "type": "number",
          "defaultValue": "320",
          "description": "Minimum viewport width"
        },
        {
          "id": "variable-d550c892-8cbe-4bfa-9575-c9960fc03f74",
          "name": "maxWidth",
          "type": "number",
          "defaultValue": "1200",
          "description": "Maximum viewport width"
        }
      ],
      "formulas": [
        {
          "id": "formula-viewport-percent",
          "name": "Viewport Percent",
          "description": "Calculate viewport percentage based on current width",
          "expressions": {
            "latex": {
              "value": "\\mathit{viewportPercent} = (\\mathit{viewportWidth} - \\mathit{minWidth}) \\div (\\mathit{maxWidth} - \\mathit{minWidth})"
            },
            "javascript": {
              "value": "viewportPercent = (viewportWidth - minWidth) / (maxWidth - minWidth)",
              "metadata": {
                "allowedOperations": [
                  "math"
                ]
              }
            },
            "ast": {
              "type": "binary",
              "operator": "-",
              "left": {
                "type": "literal",
                "value": "(viewportWidth",
                "metadata": {
                  "astVersion": "1.0.0",
                  "validationErrors": [
                    "Complex expression not fully parsed: (viewportWidth"
                  ],
                  "complexity": "high"
                }
              },
              "right": {
                "type": "binary",
                "operator": "/",
                "left": {
                  "type": "literal",
                  "value": "minWidth)",
                  "metadata": {
                    "astVersion": "1.0.0",
                    "validationErrors": [
                      "Complex expression not fully parsed: minWidth)"
                    ],
                    "complexity": "high"
                  }
                },
                "right": {
                  "type": "literal",
                  "value": "(maxWidth",
                  "metadata": {
                    "astVersion": "1.0.0",
                    "validationErrors": [
                      "Complex expression not fully parsed: (maxWidth"
                    ],
                    "complexity": "high"
                  }
                },
                "metadata": {
                  "astVersion": "1.0.0",
                  "validationErrors": [],
                  "complexity": "low"
                }
              },
              "metadata": {
                "astVersion": "1.0.0",
                "validationErrors": [],
                "complexity": "low"
              }
            }
          },
          "variableIds": [
            "variable-35b22c3d-327f-42cb-a0c0-c1458935c804",
            "variable-d550c892-8cbe-4bfa-9575-c9960fc03f74"
          ]
        },
        {
          "id": "formula-responsive-multiplier",
          "name": "Responsive Multiplier",
          "description": "Calculate responsive multiplier based on viewport percentage",
          "expressions": {
            "latex": {
              "value": "\\mathit{ResponsiveMultiplier} = 0.8 + (0.4 \\times \\mathit{viewportPercent})"
            },
            "javascript": {
              "value": "ResponsiveMultiplier = 0.8 + (0.4 * viewportPercent)",
              "metadata": {
                "allowedOperations": [
                  "math"
                ]
              }
            },
            "ast": {
              "type": "binary",
              "operator": "+",
              "left": {
                "type": "literal",
                "value": 0.8,
                "metadata": {
                  "astVersion": "1.0.0",
                  "validationErrors": [],
                  "complexity": "low"
                }
              },
              "right": {
                "type": "binary",
                "operator": "*",
                "left": {
                  "type": "literal",
                  "value": "(0.4",
                  "metadata": {
                    "astVersion": "1.0.0",
                    "validationErrors": [
                      "Complex expression not fully parsed: (0.4"
                    ],
                    "complexity": "high"
                  }
                },
                "right": {
                  "type": "literal",
                  "value": "viewportPercent)",
                  "metadata": {
                    "astVersion": "1.0.0",
                    "validationErrors": [
                      "Complex expression not fully parsed: viewportPercent)"
                    ],
                    "complexity": "high"
                  }
                },
                "metadata": {
                  "astVersion": "1.0.0",
                  "validationErrors": [],
                  "complexity": "low"
                }
              },
              "metadata": {
                "astVersion": "1.0.0",
                "validationErrors": [],
                "complexity": "low"
              }
            }
          },
          "variableIds": []
        },
        {
          "id": "formula-typescale",
          "name": "Type Scale",
          "description": "Calculate final font size using responsive multiplier and modular scale",
          "expressions": {
            "latex": {
              "value": "\\mathit{fontSize} = \\mathit{ResponsiveMultiplier} \\times \\mathit{Base} \\times \\mathit{Ratio}^{n}"
            },
            "javascript": {
              "value": "fontSize = ResponsiveMultiplier * Base * Math.pow(Ratio, n)",
              "metadata": {
                "allowedOperations": [
                  "math"
                ]
              }
            },
            "ast": {
              "type": "binary",
              "operator": "*",
              "left": {
                "type": "variable",
                "variableName": "ResponsiveMultiplier",
                "metadata": {
                  "astVersion": "1.0.0",
                  "validationErrors": [],
                  "complexity": "low"
                }
              },
              "right": {
                "type": "variable",
                "variableName": "Base",
                "metadata": {
                  "astVersion": "1.0.0",
                  "validationErrors": [],
                  "complexity": "low"
                }
              },
              "metadata": {
                "astVersion": "1.0.0",
                "validationErrors": [],
                "complexity": "low"
              }
            }
          },
          "variableIds": [
            "var_base",
            "var_ratio"
          ]
        }
      ],
      "conditions": [],
      "steps": [
        {
          "type": "formula",
          "id": "formula-viewport-percent",
          "name": "Calculate Viewport Percent"
        },
        {
          "type": "formula",
          "id": "formula-responsive-multiplier",
          "name": "Calculate Responsive Multiplier"
        },
        {
          "type": "formula",
          "id": "formula-typescale",
          "name": "Calculate Final Font Size"
        }
      ]
    },
    {
      "id": "minimal-spacing-algorithm",
      "name": "Minimal Spacing Scale Algorithm",
      "description": "Calculates spacing based on exponential scale for minimal example",
      "resolvedValueTypeId": "spacing",
      "variables": [
        {
          "id": "var_base_spacing",
          "name": "BaseSpacing",
          "type": "number",
          "defaultValue": "4",
          "description": ""
        },
        {
          "id": "var_multiplier",
          "name": "Multiplier",
          "type": "number",
          "defaultValue": "2",
          "description": ""
        }
      ],
      "formulas": [
        {
          "id": "formula-spacing",
          "name": "Spacing Scale",
          "description": "Calculates spacing based on exponential scale",
          "expressions": {
            "latex": {
              "value": "\\mathit{BaseSpacing} \\times \\mathit{Multiplier}^{n}"
            },
            "javascript": {
              "value": "BaseSpacing * Math.pow(Multiplier, n)",
              "metadata": {
                "allowedOperations": [
                  "math"
                ]
              }
            },
            "ast": {
              "type": "binary",
              "operator": "*",
              "left": {
                "type": "variable",
                "variableName": "BaseSpacing",
                "metadata": {
                  "astVersion": "1.0.0",
                  "validationErrors": [],
                  "complexity": "low"
                }
              },
              "right": {
                "type": "function",
                "functionName": "Math.pow",
                "arguments": [
                  {
                    "type": "variable",
                    "variableName": "Multiplier",
                    "metadata": {
                      "astVersion": "1.0.0",
                      "validationErrors": [],
                      "complexity": "low"
                    }
                  },
                  {
                    "type": "variable",
                    "variableName": "n",
                    "metadata": {
                      "astVersion": "1.0.0",
                      "validationErrors": [],
                      "complexity": "low"
                    }
                  }
                ],
                "metadata": {
                  "astVersion": "1.0.0",
                  "validationErrors": [],
                  "complexity": "medium"
                }
              },
              "metadata": {
                "astVersion": "1.0.0",
                "validationErrors": [],
                "complexity": "low"
              }
            }
          },
          "variableIds": [
            "var_base_spacing",
            "var_multiplier"
          ]
        }
      ],
      "conditions": [],
      "steps": [
        {
          "type": "formula",
          "id": "formula-spacing",
          "name": "Spacing Scale"
        }
      ]
    }
  ],
  "execution": {
    "order": [
      "progressive-size-algorithm"
    ],
    "parallel": false,
    "onError": "stop"
  },
  "integration": {
    "targetSchema": "https://designsystem.org/schemas/tokens/v1.0.0",
    "outputFormat": "design-tokens",
    "mergeStrategy": "merge",
    "validation": true
  },
  "examples": [
    {
      "name": "Basic Progressive Sizing",
      "description": "Generate size values for a range of positions and zoom levels",
      "useCase": "Typography scale generation",
      "config": {
        "baseMultiplier": 14,
        "baseRatio": 1.125,
        "progressiveRatio": 1.0125,
        "maxRatio": 1.125
      },
      "algorithms": [
        {
          "id": "progressive-size-algorithm",
          "variables": {
            "p": [
              -2,
              -1,
              0,
              1,
              2
            ],
            "z": [
              -4,
              -3,
              -2,
              -1,
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8
            ],
            "n": 0
          }
        }
      ],
      "expectedOutput": {
        "sizes": [
          {
            "name": "size-0",
            "value": 8.89,
            "description": "Size for position -2, zoom -4, index 0"
          },
          {
            "name": "size-1",
            "value": 9.99,
            "description": "Size for position -1, zoom -3, index 1"
          }
        ]
      }
    }
  ]
}