{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "https://designsystem.org/schemas/tokens/v1.0.0",
    "title": "Design Token System Schema",
    "description": "Schema for design tokens with multi-dimensional modes and flexible resolution",
    "type": "object",
    "required": ["systemName", "systemId", "tokenCollections", "dimensions", "tokens", "platforms", "version", "versionHistory", "componentCategories", "components"],
    "properties": {
      "systemName": {
        "type": "string",
        "description": "Name of the design system"
      },
      "systemId": {
        "type": "string",
        "description": "Unique identifier for the design system",
        "pattern": "^[a-zA-Z0-9-_]+$"
      },
      "description": {
        "type": "string",
        "description": "Description of the design system"
      },
      "figmaConfiguration": {
        "type": "object",
        "description": "Figma publishing configuration for design tool integration",
        "required": ["fileKey"],
        "properties": {
          "syntaxPatterns": {
            "type": "object",
            "description": "Patterns for generating Figma token names",
            "properties": {
              "prefix": {
                "type": "string",
                "description": "Prefix to add before token names"
              },
              "suffix": {
                "type": "string",
                "description": "Suffix to add after token names"
              },
              "delimiter": {
                "type": "string",
                "description": "Delimiter to use between token name parts.",
                "enum": ["", "_", "-", ".", "/"],
                "enumDescriptions": [
                  "None (no delimiter)",
                  "Underscore (_)",
                  "Hyphen (-)",
                  "Dot (.)",
                  "Forward slash (/)"
                ]
              },
              "capitalization": {
                "type": "string",
                "enum": ["camel", "uppercase", "lowercase", "capitalize"],
                "description": "Capitalization style for token names"
              },
              "formatString": {
                "type": "string",
                "description": "Template string for formatting token names, using {name} as placeholder"
              }
            }
          },
          "fileKey": {
            "type": "string",
            "description": "Default Figma file key for publishing core tokens"
          }
        }
      },
      "version": {
        "type": "string",
        "description": "Semantic version of the token set",
        "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
      },
      "versionHistory": {
        "type": "array",
        "description": "History of schema versions and their dimension configurations",
        "items": {
          "type": "object",
          "required": ["version", "dimensions", "date"],
          "properties": {
            "version": {
              "type": "string",
              "description": "Semantic version of this schema state"
            },
            "dimensions": {
              "type": "array",
              "description": "List of dimension IDs present in this version",
              "items": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9-_]+$"
              }
            },
            "date": {
              "type": "string",
              "format": "date",
              "description": "Date when this version was introduced"
            },
            "migrationStrategy": {
              "type": "object",
              "description": "Strategy for migrating from previous version",
              "properties": {
                "emptyModeIds": {
                  "type": "string",
                  "enum": ["mapToDefaults", "preserveEmpty", "requireExplicit"],
                  "description": "How to handle empty modeIds when migrating"
                },
                "preserveOriginalValues": {
                  "type": "boolean",
                  "description": "Whether to keep original values when migrating"
                }
              }
            }
          }
        }
      },
      "dimensionEvolution": {
        "type": "object",
        "description": "Rules for handling dimension changes",
        "properties": {
          "rules": {
            "type": "array",
            "description": "Rules for dimension evolution",
            "items": {
              "type": "object",
              "required": ["whenAdding", "mapEmptyModeIdsTo"],
              "properties": {
                "whenAdding": {
                  "type": "string",
                  "description": "ID of the dimension being added",
                  "pattern": "^[a-zA-Z0-9-_]+$"
                },
                "mapEmptyModeIdsTo": {
                  "type": "array",
                  "description": "List of mode IDs to use when modeIds is empty",
                  "items": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9-_]+$"
                  }
                },
                "preserveDefaultValues": {
                  "type": "boolean",
                  "description": "Whether to preserve default values when mapping"
                }
              }
            }
          }
        }
      },
      "exportConfigurations": {
        "type": "object",
        "description": "Platform-specific export configuration rules",
        "patternProperties": {
          "^[a-zA-Z0-9-_]+$": {
            "type": "object",
            "required": ["prefix", "delimiter", "capitalization"],
            "properties": {
              "prefix": {
                "type": "string",
                "description": "Prefix to add before token names"
              },
              "delimiter": {
                "type": "string",
                "description": "Delimiter to use between token name parts.",
                "enum": ["", "_", "-", ".", "/"],
                "enumDescriptions": [
                  "None (no delimiter)",
                  "Underscore (_)",
                  "Hyphen (-)",
                  "Dot (.)",
                  "Forward slash (/)"
                ]
              },
              "capitalization": {
                "type": "string",
                "description": "Capitalization style for token names",
                "enum": ["none", "uppercase", "lowercase", "capitalize"]
              }
            }
          }
        }
      },
      "metadata": {
        "type": "object",
        "description": "Additional information about the token set",
        "properties": {
          "description": { "type": "string" },
          "lastUpdated": { 
            "type": "string",
            "format": "date" 
          },
          "maintainers": {
            "type": "array",
            "items": { "type": "string" }
          }
        }
      },
      "dimensionOrder": {
        "type": "array",
        "description": "Order of dimensions to use when resolving token values. Each ID must match a dimension ID from the dimensions array.",
        "items": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9-_]+$"
        },
        "uniqueItems": true
      },
      "taxonomyOrder": {
        "type": "array",
        "description": "Order of taxonomy IDs to use when generating codeSyntax strings. Determines which taxonomy's term comes first, second, etc.",
        "items": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9-_]+$"
        },
        "uniqueItems": true
      },
      "tokenCollections": {
        "type": "array",
        "description": "Collections of tokens grouped by type",
        "items": {
          "type": "object",
          "required": ["id", "name", "resolvedValueTypeIds"],
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the collection",
              "pattern": "^[a-zA-Z0-9-_]+$"
            },
            "name": { 
              "type": "string",
              "description": "Display name for the collection" 
            },
            "description": { 
              "type": "string",
              "description": "Detailed description of the collection" 
            },
            "resolvedValueTypeIds": {
              "type": "array",
              "description": "IDs of resolved value types this collection can contain. Must match an ID from the top-level resolvedValueTypes array.",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            },
            "private": {
              "type": "boolean",
              "description": "Whether this collection is for internal use only",
              "default": false
            }
          }
        }
      },
      "platforms": {
        "type": "array",
        "description": "Runtime platforms that can be used to resolve token values. Each platform must reference an external platform extension file containing platform-specific syntax patterns, value formatters, and overrides.",
        "items": {
          "type": "object",
          "required": ["id", "displayName", "extensionSource"],
          "properties": {
            "id": { 
              "type": "string",
              "description": "Unique identifier for the platform"
            },
            "displayName": { 
              "type": "string",
              "description": "Human-readable name for the platform"
            },
            "description": { 
              "type": "string",
              "description": "Detailed description of the platform"
            },
            "extensionSource": {
              "type": "object",
              "description": "Reference to external platform extension file containing platform-specific configuration and overrides.",
              "properties": {
                "repositoryUri": {
                  "type": "string",
                  "description": "GitHub repository URI (e.g., 'owner/repo')"
                },
                "filePath": {
                  "type": "string",
                  "description": "Path to the platform extension file within the repository"
                }
              },
              "required": ["repositoryUri", "filePath"]
            },
            "status": {
              "type": "string",
              "enum": ["active", "deprecated"],
              "description": "Lifecycle status of this platform",
              "default": "active"
            }
          }
        },
        "allOf": [
          {
            "if": {
              "type": "array",
              "minItems": 1
            },
            "then": {
              "custom": {
                "function": "validateUniqueExtensionSources",
                "description": "Platforms with extensionSource must have unique combinations of repositoryUri and filePath"
              }
            }
          }
        ]
      },

      "dimensions": {
        "type": "array",
        "description": "List of dimensions that can be used to organize and resolve token values",
        "items": {
          "type": "object",
          "required": ["id", "displayName", "modes", "required", "defaultMode"],
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the dimension",
              "pattern": "^[a-zA-Z0-9-_]+$"
            },
            "displayName": {
              "type": "string",
              "description": "Human-readable name for the dimension"
            },
            "description": {
              "type": "string",
              "description": "Optional description of the dimension's purpose"
            },
            "modes": {
              "type": "array",
              "description": "List of modes available for this dimension",
              "minItems": 1,
              "items": {
                "type": "object",
                "required": ["id", "name", "dimensionId"],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique identifier for the mode",
                    "pattern": "^[a-zA-Z0-9-_]+$"
                  },
                  "name": {
                    "type": "string",
                    "description": "Human-readable name for the mode"
                  },
                  "description": {
                    "type": "string",
                    "description": "Optional description of the mode"
                  },
                  "dimensionId": {
                    "type": "string",
                    "description": "ID of the parent dimension",
                    "pattern": "^[a-zA-Z0-9-_]+$"
                  }
                }
              }
            },
            "required": {
              "type": "boolean",
              "description": "Whether this dimension must be specified when resolving tokens",
              "default": false
            },
            "defaultMode": {
              "type": "string",
              "description": "ID of the default mode for this dimension",
              "pattern": "^[a-zA-Z0-9-_]+$"
            },
            "resolvedValueTypeIds": {
              "type": "array",
              "description": "IDs of resolved value types this dimension supports or is associated with",
              "items": { "type": "string" },
              "uniqueItems": true
            }
          }
        }
      },
      "tokens": {
        "type": "array",
        "description": "Design tokens with values that can vary by mode",
        "items": {
          "type": "object",
          "required": ["id", "displayName", "resolvedValueTypeId", "valuesByMode", "tokenTier"],
          "properties": {
            "tokenTier": {
              "type": "string",
              "description": "Classification of the token's level in the design system hierarchy",
              "enum": ["PRIMITIVE", "SEMANTIC", "COMPONENT"],
              "enumDescriptions": [
                "Base-level design tokens that represent raw values",
                "Tokens that reference primitives and provide semantic meaning",
                "Tokens that represent component-level design decisions"
              ]
            },
            "id": {
              "type": "string",
              "description": "Unique identifier for the token",
              "pattern": "^[a-zA-Z0-9-_]+$"
            },
            "displayName": { 
              "type": "string",
              "description": "Human-readable name for the token" 
            },
            "description": { 
              "type": "string",
              "description": "Detailed description of the token" 
            },
            "tokenCollectionId": {
              "type": "string",
              "description": "ID of the collection this token belongs to",
              "pattern": "^[a-zA-Z0-9-_]+$",
              "nullable": true
            },
            "resolvedValueTypeId": {
              "type": "string",
              "description": "Type of value this token resolves to",
              "pattern": "^[a-zA-Z0-9-_]+$"
            },
            "private": {
              "type": "boolean",
              "description": "Whether this token is for internal use only",
              "default": false
            },
            "status": {
              "type": "string",
              "description": "Lifecycle status of this token",
              "enum": ["experimental", "stable", "deprecated"]
            },
            "themeable": {
              "type": "boolean",
              "description": "Whether this token can be overridden by a theme",
              "default": false
            },
            "generatedByAlgorithm": {
              "type": "boolean",
              "description": "Whether this token was generated by an algorithm",
              "default": false
            },
            "algorithmId": {
              "type": "string",
              "description": "ID of the algorithm that generated this token (must match an algorithm ID from the algorithm schema)",
              "pattern": "^[a-zA-Z0-9-_]+$"
            },
            "taxonomies": {
              "type": "array",
              "description": "Categorical classification of the token. Each entry must reference a taxonomy and a term from the top-level taxonomies array.",
              "items": {
                "type": "object",
                "required": ["taxonomyId", "termId"],
                "properties": {
                  "taxonomyId": {
                    "type": "string",
                    "description": "ID of the taxonomy (must match a taxonomy in the top-level taxonomies array)"
                  },
                  "termId": {
                    "type": "string",
                    "description": "ID of the term (must match a term in the referenced taxonomy)"
                  }
                }
              }
            },
            "propertyTypes": {
              "type": "array",
              "description": "Property types this token can be applied to",
              "items": {
                "$ref": "#/definitions/PropertyType"
              }
            },
            "codeSyntax": {
              "type": "array",
              "description": "Platform-specific naming conventions for this token.",
              "items": {
                "type": "object",
                "required": ["platformId", "formattedName"],
                "properties": {
                  "platformId": {
                    "type": "string",
                    "description": "ID of the platform this code syntax applies to (must match a platform in the platforms array)"
                  },
                  "formattedName": {
                    "type": "string",
                    "description": "The formatted code syntax for this platform."
                  }
                }
              }
            },
            "valuesByMode": {
              "type": "array",
              "description": "Values for this token in different mode combinations",
              "minItems": 1,
              "items": {
                "type": "object",
                "required": ["modeIds", "value"],
                "properties": {
                  "modeIds": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "The mode(s) this value applies to"
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "object",
                        "required": ["value"],
                        "properties": {
                          "value": {}
                        }
                      },
                      {
                        "type": "object",
                        "required": ["tokenId"],
                        "properties": {
                          "tokenId": {
                            "type": "string",
                            "description": "ID of the token to alias to"
                          }
                        }
                      }
                    ]
                  },
                  "platformOverrides": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": ["platformId", "value"],
                      "properties": {
                        "platformId": { "type": "string" },
                        "value": { "type": "string" },
                        "metadata": { "type": "object" }
                      }
                    }
                  },
                  "metadata": { "type": "object" }
                }
              },
              "allOf": [
                {
                  "if": {
                    "contains": {
                      "type": "object",
                      "properties": { "modeIds": { "type": "array", "maxItems": 0 } },
                      "required": ["modeIds"]
                    }
                  },
                  "then": { "minItems": 1, "maxItems": 1 },
                  "else": {
                    "not": {
                      "contains": {
                        "type": "object",
                        "properties": { "modeIds": { "type": "array", "maxItems": 0 } },
                        "required": ["modeIds"]
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "extensions": {
        "type": "object",
        "description": "Extensions to the core token model",
        "properties": {
          "tokenGroups": {
            "type": "array",
            "description": "Groups of tokens for organizational purposes",
            "items": {
              "type": "object",
              "required": ["id", "name", "tokenIds"],
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^[a-zA-Z0-9-_]+$"
                },
                "name": { "type": "string" },
                "description": { "type": "string" },
                "tokenIds": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9-_]+$"
                  }
                }
              }
            }
          },
          "tokenVariants": {
            "type": "object",
            "description": "Variant generation rules for tokens",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "transform": {
                    "type": "object",
                    "required": ["type"],
                    "properties": {
                      "type": { 
                        "type": "string",
                        "enum": [
                          "lighten",
                          "darken",
                          "alpha",
                          "scale",
                          "add",
                          "multiply"
                        ]
                      },
                      "amount": { "type": "number" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "themes": {
        "type": "array",
        "description": "Themes that can override token values across the entire dataset",
        "minItems": 1,
        "items": {
          "type": "object",
          "required": ["id", "displayName", "isDefault"],
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the theme",
              "pattern": "^[a-zA-Z0-9-_]+$"
            },
            "displayName": {
              "type": "string",
              "description": "Human-readable name for the theme"
            },
            "description": {
              "type": "string",
              "description": "Detailed description of the theme"
            },
            "isDefault": {
              "type": "boolean",
              "description": "Whether this is the default theme. Exactly one theme must be marked as default."
            },
            "overrideFileUri": {
              "type": "string",
              "description": "URI pointing to the theme override file for this theme"
            }
          }
        }
      },

      "taxonomies": {
        "type": "array",
        "description": "List of taxonomies for organizing tokens or other entities.",
        "items": {
          "type": "object",
          "required": ["id", "name", "terms"],
          "properties": {
            "id": { "type": "string", "description": "Unique identifier for the taxonomy." },
            "name": { "type": "string", "description": "Human-readable name for the taxonomy." },
            "description": { "type": "string", "description": "Optional description of the taxonomy." },
            "terms": {
              "type": "array",
              "description": "Terms within this taxonomy.",
              "items": {
                "type": "object",
                "required": ["id", "name"],
                "properties": {
                  "id": { "type": "string", "description": "Unique identifier for the term." },
                  "name": { "type": "string", "description": "Human-readable name for the term." },
                  "description": { "type": "string", "description": "Optional description of the term." }
                }
              }
            },
            "resolvedValueTypeIds": {
              "type": "array",
              "description": "IDs of resolved value types this taxonomy supports or is associated with.",
              "items": { "type": "string" },
              "uniqueItems": true
            }
          }
        }
      },

      "componentCategories": {
        "type": "array",
        "description": "Standard categories for organizing components",
        "items": {
          "type": "object",
          "required": ["id", "displayName"],
          "properties": {
            "id": { "type": "string", "pattern": "^[a-zA-Z0-9-_]+$" },
            "displayName": { "type": "string" },
            "description": { "type": "string" }
          }
        }
      },

      "components": {
        "type": "array",
        "description": "Registry of standardized components with governed properties and component-specific context",
        "items": {
          "type": "object",
          "required": ["id", "displayName", "componentProperties", "componentCategoryId"],
          "properties": {
            "id": { "type": "string", "pattern": "^[a-zA-Z0-9-_]+$" },
            "displayName": { "type": "string" },
            "description": { "type": "string" },
            "componentCategoryId": {
              "type": "string",
              "description": "ID of the component category (must reference an id in componentCategories)"
            },
            "componentProperties": {
              "type": "array",
              "description": "Component properties with component-specific context and option restrictions",
              "items": {
                "type": "object",
                "required": ["componentPropertyId"],
                "properties": {
                  "componentPropertyId": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9-_]+$",
                    "description": "ID of the component property (must reference an id in componentProperties)"
                  },
                  "description": {
                    "type": "string",
                    "description": "Component-specific description of how this property applies to this component"
                  },
                  "supportedOptionIds": {
                    "type": "array",
                    "description": "For list-type properties, specifies which option ids are supported by this component. If omitted, all options are supported.",
                    "items": { "type": "string", "pattern": "^[a-zA-Z0-9-_]+$" }
                  },
                  "default": {
                    "oneOf": [
                      { "type": "boolean", "description": "Component-specific default for boolean properties" },
                      { "type": "string", "description": "Component-specific default option id for list properties" }
                    ],
                    "description": "Component-specific default value (overrides the property's global default)"
                  }
                }
              }
            }
          }
        }
      },

      "standardPropertyTypes": {
        "type": "array",
        "description": "Standard property types with cross-platform mappings - these are always available and provide consistent platform mappings.",
        "items": {
          "type": "object",
          "required": ["id", "displayName", "compatibleValueTypes"],
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the standard property type.",
              "pattern": "^[a-zA-Z0-9-_]+$"
            },
            "displayName": {
              "type": "string",
              "description": "Human-readable name for the property type."
            },
            "category": {
              "type": "string",
              "description": "Category this property belongs to.",
              "enum": ["color", "typography", "spacing", "dimension", "effect", "border", "layout", "animation"]
            },
            "compatibleValueTypes": {
              "type": "array",
              "description": "List of resolved value types that can be used with this property.",
              "items": { "type": "string" }
            },
            "platformMappings": {
              "type": "object",
              "description": "Platform-specific property mappings.",
              "properties": {
                "css": {
                  "type": "array",
                  "items": { "type": "string" },
                  "description": "CSS property names"
                },
                "figma": {
                  "type": "array",
                  "items": { "type": "string" },
                  "description": "Figma scopes"
                },
                "ios": {
                  "type": "array",
                  "items": { "type": "string" },
                  "description": "iOS/SwiftUI property names"
                },
                "android": {
                  "type": "array",
                  "items": { "type": "string" },
                  "description": "Android property names"
                }
              }
            },
            "defaultUnit": {
              "type": "string",
              "description": "Default unit for this property type (if applicable)."
            },
            "inheritance": {
              "type": "boolean",
              "description": "Whether this property supports inheritance.",
              "default": false
            }
          }
        },
        "uniqueItems": true,
        "default": [
          {
            "id": "background-color",
            "displayName": "Background Color",
            "category": "color",
            "compatibleValueTypes": ["color"],
            "platformMappings": {
              "css": ["background", "background-color"],
              "figma": ["FRAME_FILL", "SHAPE_FILL"],
              "ios": [".background()", ".backgroundColor"],
              "android": ["background", "colorBackground"]
            },
            "inheritance": true
          },
          {
            "id": "text-color",
            "displayName": "Text Color",
            "category": "color",
            "compatibleValueTypes": ["color"],
            "platformMappings": {
              "css": ["color"],
              "figma": ["TEXT_FILL"],
              "ios": [".foregroundColor()", ".foregroundStyle()"],
              "android": ["textColor", "colorOnSurface"]
            },
            "inheritance": true
          },
          {
            "id": "border-color",
            "displayName": "Border Color",
            "category": "color",
            "compatibleValueTypes": ["color"],
            "platformMappings": {
              "css": ["border-color", "border-*-color"],
              "figma": ["STROKE_COLOR"],
              "ios": [".border()", ".strokeColor"],
              "android": ["strokeColor", "colorOutline"]
            },
            "inheritance": false
          },
          {
            "id": "shadow-color",
            "displayName": "Shadow Color",
            "category": "color",
            "compatibleValueTypes": ["color"],
            "platformMappings": {
              "css": ["box-shadow", "text-shadow"],
              "figma": ["EFFECT_COLOR"],
              "ios": [".shadow()", ".shadowColor"],
              "android": ["shadowColor", "elevation"]
            },
            "inheritance": false
          },
          {
            "id": "width-height",
            "displayName": "Width/Height",
            "category": "dimension",
            "compatibleValueTypes": ["dimension"],
            "platformMappings": {
              "css": ["width", "height", "min-width", "max-width", "min-height", "max-height"],
              "figma": ["WIDTH_HEIGHT"],
              "ios": [".frame()", ".width()", ".height()"],
              "android": ["layout_width", "layout_height"]
            },
            "defaultUnit": "px",
            "inheritance": false
          },
          {
            "id": "padding",
            "displayName": "Padding",
            "category": "spacing",
            "compatibleValueTypes": ["spacing"],
            "platformMappings": {
              "css": ["padding", "padding-*"],
              "figma": ["GAP"],
              "ios": [".padding()"],
              "android": ["padding", "paddingStart", "paddingEnd"]
            },
            "defaultUnit": "px",
            "inheritance": false
          },
          {
            "id": "margin",
            "displayName": "Margin",
            "category": "spacing",
            "compatibleValueTypes": ["spacing"],
            "platformMappings": {
              "css": ["margin", "margin-*"],
              "figma": ["GAP"],
              "ios": [".offset()"],
              "android": ["layout_margin", "marginStart", "marginEnd"]
            },
            "defaultUnit": "px",
            "inheritance": false
          },
          {
            "id": "gap-spacing",
            "displayName": "Gap/Spacing",
            "category": "spacing",
            "compatibleValueTypes": ["spacing"],
            "platformMappings": {
              "css": ["gap", "row-gap", "column-gap"],
              "figma": ["GAP"],
              "ios": [".spacing()"],
              "android": ["layout_spaceBetween", "space"]
            },
            "defaultUnit": "px",
            "inheritance": false
          },
          {
            "id": "border-radius",
            "displayName": "Border Radius",
            "category": "border",
            "compatibleValueTypes": ["radius"],
            "platformMappings": {
              "css": ["border-radius", "border-*-radius"],
              "figma": ["CORNER_RADIUS"],
              "ios": [".cornerRadius()", ".clipShape()"],
              "android": ["cornerRadius", "shapeAppearance"]
            },
            "defaultUnit": "px",
            "inheritance": false
          },
          {
            "id": "font-family",
            "displayName": "Font Family",
            "category": "typography",
            "compatibleValueTypes": ["font-family"],
            "platformMappings": {
              "css": ["font-family"],
              "figma": ["FONT_FAMILY"],
              "ios": [".font()", ".fontFamily()"],
              "android": ["fontFamily", "typeface"]
            },
            "inheritance": true
          },
          {
            "id": "font-size",
            "displayName": "Font Size",
            "category": "typography",
            "compatibleValueTypes": ["font-size"],
            "platformMappings": {
              "css": ["font-size"],
              "figma": ["FONT_SIZE"],
              "ios": [".font()", ".fontSize()"],
              "android": ["textSize", "fontSize"]
            },
            "defaultUnit": "px",
            "inheritance": true
          },
          {
            "id": "font-weight",
            "displayName": "Font Weight",
            "category": "typography",
            "compatibleValueTypes": ["font-weight"],
            "platformMappings": {
              "css": ["font-weight"],
              "figma": ["FONT_WEIGHT"],
              "ios": [".fontWeight()", ".font()"],
              "android": ["textStyle", "fontWeight"]
            },
            "inheritance": true
          },
          {
            "id": "font-style",
            "displayName": "Font Style",
            "category": "typography",
            "compatibleValueTypes": ["font-style"],
            "platformMappings": {
              "css": ["font-style"],
              "figma": ["FONT_STYLE"],
              "ios": [".italic()", ".font()"],
              "android": ["textStyle", "fontStyle"]
            },
            "inheritance": true
          },
          {
            "id": "line-height",
            "displayName": "Line Height",
            "category": "typography",
            "compatibleValueTypes": ["line-height"],
            "platformMappings": {
              "css": ["line-height"],
              "figma": ["LINE_HEIGHT"],
              "ios": [".lineSpacing()", ".lineHeight()"],
              "android": ["lineHeight", "lineSpacingMultiplier"]
            },
            "inheritance": true
          },
          {
            "id": "letter-spacing",
            "displayName": "Letter Spacing",
            "category": "typography",
            "compatibleValueTypes": ["letter-spacing"],
            "platformMappings": {
              "css": ["letter-spacing"],
              "figma": ["LETTER_SPACING"],
              "ios": [".kerning()", ".tracking()"],
              "android": ["letterSpacing", "textLetterSpacing"]
            },
            "defaultUnit": "px",
            "inheritance": true
          },
          {
            "id": "text-alignment",
            "displayName": "Text Alignment",
            "category": "typography",
            "compatibleValueTypes": ["text-alignment"],
            "platformMappings": {
              "css": ["text-align"],
              "figma": ["TEXT_CONTENT"],
              "ios": [".multilineTextAlignment()"],
              "android": ["textAlignment", "gravity"]
            },
            "inheritance": true
          },
          {
            "id": "text-transform",
            "displayName": "Text Transform",
            "category": "typography",
            "compatibleValueTypes": ["text-transform"],
            "platformMappings": {
              "css": ["text-transform"],
              "figma": ["TEXT_CONTENT"],
              "ios": [".textCase()"],
              "android": ["textAllCaps", "textTransform"]
            },
            "inheritance": true
          },
          {
            "id": "opacity",
            "displayName": "Opacity",
            "category": "effect",
            "compatibleValueTypes": ["opacity"],
            "platformMappings": {
              "css": ["opacity"],
              "figma": ["OPACITY"],
              "ios": [".opacity()"],
              "android": ["alpha", "opacity"]
            },
            "inheritance": false
          },
          {
            "id": "shadow",
            "displayName": "Shadow",
            "category": "effect",
            "compatibleValueTypes": ["shadow", "spread"],
            "platformMappings": {
              "css": ["box-shadow", "filter: drop-shadow()"],
              "figma": ["EFFECT_FLOAT"],
              "ios": [".shadow()"],
              "android": ["elevation", "shadowDx", "shadowDy"]
            },
            "inheritance": false
          },
          {
            "id": "blur",
            "displayName": "Blur",
            "category": "effect",
            "compatibleValueTypes": ["blur"],
            "platformMappings": {
              "css": ["filter: blur()"],
              "figma": ["EFFECT_FLOAT"],
              "ios": [".blur()"],
              "android": ["renderEffect", "blurRadius"]
            },
            "defaultUnit": "px",
            "inheritance": false
          },
          {
            "id": "border-width",
            "displayName": "Border Width",
            "category": "border",
            "compatibleValueTypes": ["dimension"],
            "platformMappings": {
              "css": ["border-width", "border-*-width"],
              "figma": ["STROKE_FLOAT"],
              "ios": [".border()"],
              "android": ["strokeWidth", "borderWidth"]
            },
            "defaultUnit": "px",
            "inheritance": false
          },
          {
            "id": "position",
            "displayName": "Position",
            "category": "layout",
            "compatibleValueTypes": ["dimension"],
            "platformMappings": {
              "css": ["position", "top", "right", "bottom", "left"],
              "figma": ["ALL_SCOPES"],
              "ios": [".position()", ".offset()"],
              "android": ["layout_marginTop", "layout_marginStart"]
            },
            "defaultUnit": "px",
            "inheritance": false
          },
          {
            "id": "z-index",
            "displayName": "Z-Index",
            "category": "layout",
            "compatibleValueTypes": ["z-index"],
            "platformMappings": {
              "css": ["z-index"],
              "figma": ["ALL_SCOPES"],
              "ios": [".zIndex()"],
              "android": ["elevation", "translationZ"]
            },
            "inheritance": false
          },
          {
            "id": "flex-properties",
            "displayName": "Flex Properties",
            "category": "layout",
            "compatibleValueTypes": ["flex"],
            "platformMappings": {
              "css": ["flex", "flex-grow", "flex-shrink", "flex-basis"],
              "figma": ["ALL_SCOPES"],
              "ios": [".layoutPriority()"],
              "android": ["layout_weight", "flex"]
            },
            "inheritance": false
          },
          {
            "id": "duration",
            "displayName": "Duration",
            "category": "animation",
            "compatibleValueTypes": ["duration"],
            "platformMappings": {
              "css": ["animation-duration", "transition-duration"],
              "figma": ["EFFECT_FLOAT"],
              "ios": [".animation()"],
              "android": ["duration", "animationDuration"]
            },
            "defaultUnit": "ms",
            "inheritance": false
          },
          {
            "id": "easing",
            "displayName": "Easing",
            "category": "animation",
            "compatibleValueTypes": ["cubic-bezier"],
            "platformMappings": {
              "css": ["animation-timing-function", "transition-timing-function"],
              "figma": ["ALL_SCOPES"],
              "ios": [".animation()"],
              "android": ["interpolator", "animationInterpolator"]
            },
            "inheritance": false
          },
          {
            "id": "delay",
            "displayName": "Delay",
            "category": "animation",
            "compatibleValueTypes": ["duration"],
            "platformMappings": {
              "css": ["animation-delay", "transition-delay"],
              "figma": ["EFFECT_FLOAT"],
              "ios": [".animation()"],
              "android": ["startDelay", "animationDelay"]
            },
            "defaultUnit": "ms",
            "inheritance": false
          }
        ]
      },
      "propertyTypes": {
        "type": "array",
        "description": "Custom property types that extend the standard property types - describes where/how tokens are applied.",
        "items": {
          "type": "object",
          "required": ["id", "displayName", "compatibleValueTypes"],
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the property type.",
              "pattern": "^[a-zA-Z0-9-_]+$"
            },
            "displayName": {
              "type": "string",
              "description": "Human-readable name for the property type."
            },
            "category": {
              "type": "string",
              "description": "Category this property belongs to.",
              "enum": ["color", "typography", "spacing", "dimension", "effect", "border", "layout", "animation"]
            },
            "compatibleValueTypes": {
              "type": "array",
              "description": "List of resolved value types that can be used with this property.",
              "items": { "type": "string" }
            },
            "platformMappings": {
              "type": "object",
              "description": "Platform-specific property mappings.",
              "properties": {
                "css": {
                  "type": "array",
                  "items": { "type": "string" },
                  "description": "CSS property names"
                },
                "figma": {
                  "type": "array",
                  "items": { "type": "string" },
                  "description": "Figma scopes"
                },
                "ios": {
                  "type": "array",
                  "items": { "type": "string" },
                  "description": "iOS/SwiftUI property names"
                },
                "android": {
                  "type": "array",
                  "items": { "type": "string" },
                  "description": "Android property names"
                }
              }
            },
            "defaultUnit": {
              "type": "string",
              "description": "Default unit for this property type (if applicable)."
            },
            "inheritance": {
              "type": "boolean",
              "description": "Whether this property supports inheritance.",
              "default": false
            }
          }
        },
        "uniqueItems": true
      },
      "resolvedValueTypes": {
        "type": "array",
        "description": "List of resolved value types supported by the system.",
        "items": {
          "type": "object",
          "required": ["id", "displayName"],
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the resolved value type.",
              "pattern": "^[a-zA-Z0-9-_]+$"
            },
            "displayName": {
              "type": "string",
              "description": "Human-readable name for the resolved value type."
            },
            "type": {
              "type": "string",
              "description": "Standard type identifier. If not provided, this is a custom type.",
              "enum": [
                "COLOR",
                "DIMENSION",
                "SPACING",
                "FONT_FAMILY",
                "FONT_WEIGHT",
                "FONT_SIZE",
                "LINE_HEIGHT",
                "LETTER_SPACING",
                "DURATION",
                "CUBIC_BEZIER",
                "BLUR",
                "SPREAD",
                "RADIUS"
              ]
            },
            "description": {
              "type": "string",
              "description": "Optional description of the value type's purpose and usage."
            },
            "validation": {
              "type": "object",
              "description": "Optional validation rules specific to this value type.",
              "properties": {
                "pattern": {
                  "type": "string",
                  "description": "Regular expression pattern for validating values."
                },
                "minimum": {
                  "type": "number",
                  "description": "Minimum allowed value for numeric types."
                },
                "maximum": {
                  "type": "number",
                  "description": "Maximum allowed value for numeric types."
                },
                "allowedValues": {
                  "type": "array",
                  "description": "List of allowed values for this type.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "additionalProperties": true
        },
        "uniqueItems": true
      },
      "componentProperties": {
        "type": "array",
        "description": "List of component properties for organizing and categorizing component-specific attributes.",
        "items": {
          "type": "object",
          "required": ["id", "displayName", "type", "default"],
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the component property.",
              "pattern": "^[a-zA-Z0-9-_]+$"
            },
            "displayName": {
              "type": "string",
              "description": "Human-readable name for the component property."
            },
            "description": {
              "type": "string",
              "description": "Optional description of the component property's purpose and usage."
            },
            "type": {
              "type": "string",
              "description": "Type of component property - boolean for true/false values, list for predefined options.",
              "enum": ["boolean", "list"],
              "enumDescriptions": [
                "Boolean property with true/false values",
                "List property with predefined options"
              ]
            },
            "default": {
              "oneOf": [
                {
                  "type": "boolean",
                  "description": "Default value for boolean type properties"
                },
                {
                  "type": "string",
                  "description": "Default option ID for list type properties (must match an option ID in the options array)"
                }
              ]
            },
            "options": {
              "type": "array",
              "description": "Available options for list type component properties. Required when type is 'list'.",
              "minItems": 1,
              "items": {
                "type": "object",
                "required": ["id", "displayName"],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique identifier for the option.",
                    "pattern": "^[a-zA-Z0-9-_]+$"
                  },
                  "displayName": {
                    "type": "string",
                    "description": "Human-readable name for the option."
                  },
                  "description": {
                    "type": "string",
                    "description": "Optional description of the option."
                  }
                }
              },
              "uniqueItems": true
            }
          },
          "allOf": [
            {
              "if": {
                "properties": { "type": { "const": "boolean" } }
              },
              "then": {
                "properties": {
                  "default": { "type": "boolean" }
                },
                "not": { "required": ["options"] }
              }
            },
            {
              "if": {
                "properties": { "type": { "const": "list" } }
              },
              "then": {
                "properties": {
                  "default": { "type": "string" }
                },
                "required": ["options"]
              }
            }
          ]
        }
      }
    },
    "additionalProperties": false,
    "definitions": {
      "colorValue": {
        "type": "object",
        "description": "Color value with optional metadata",
        "required": ["hex"],
        "properties": {
          "hex": {
            "type": "string",
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{8})$"
          },
          "rgb": {
            "type": "object",
            "properties": {
              "r": { "type": "integer", "minimum": 0, "maximum": 255 },
              "g": { "type": "integer", "minimum": 0, "maximum": 255 },
              "b": { "type": "integer", "minimum": 0, "maximum": 255 },
              "a": { "type": "number", "minimum": 0, "maximum": 1 }
            },
            "required": ["r", "g", "b"]
          }
        }
      },
      "dimensionValue": {
        "type": "object",
        "description": "Dimension value with unit",
        "oneOf": [
          {
            "required": ["value", "unit"],
            "properties": {
              "value": { "type": "number" },
              "unit": { 
                "type": "string",
                "enum": ["px", "rem", "%", "em", "vh", "vw", "pt"]
              }
            }
          },
          {
            "type": "string",
            "pattern": "^[0-9]+(\\.[0-9]+)?(px|rem|%|em|vh|vw|pt)$"
          }
        ]
      },
      "durationValue": {
        "type": "object",
        "description": "Duration value with unit",
        "oneOf": [
          {
            "required": ["value", "unit"],
            "properties": {
              "value": { "type": "number", "minimum": 0 },
              "unit": { 
                "type": "string",
                "enum": ["ms", "s"]
              }
            }
          },
          {
            "type": "string",
            "pattern": "^[0-9]+(\\.[0-9]+)?(ms|s)$"
          }
        ]
      },
      "cubicBezierValue": {
        "type": "object",
        "description": "Cubic bezier value",
        "oneOf": [
          {
            "required": ["x1", "y1", "x2", "y2"],
            "properties": {
              "x1": { "type": "number", "minimum": 0, "maximum": 1 },
              "y1": { "type": "number" },
              "x2": { "type": "number", "minimum": 0, "maximum": 1 },
              "y2": { "type": "number" }
            }
          },
          {
            "type": "string",
            "pattern": "^cubic-bezier\\([0-9]*(\\.[0-9]+)?, ?[0-9]*(\\.[0-9]+)?, ?[0-9]*(\\.[0-9]+)?, ?[0-9]*(\\.[0-9]+)?\\)$"
          }
        ]
      },
      "shadowValue": {
        "type": "object",
        "description": "Shadow value",
        "oneOf": [
          {
            "type": "object",
            "required": ["offsetX", "offsetY", "blur", "spread", "color"],
            "properties": {
              "offsetX": { "$ref": "#/definitions/dimensionValue" },
              "offsetY": { "$ref": "#/definitions/dimensionValue" },
              "blur": { "$ref": "#/definitions/dimensionValue" },
              "spread": { "$ref": "#/definitions/dimensionValue" },
              "color": { "$ref": "#/definitions/colorValue" },
              "inset": { "type": "boolean" }
            }
          },
          {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["offsetX", "offsetY", "blur", "spread", "color"],
              "properties": {
                "offsetX": { "$ref": "#/definitions/dimensionValue" },
                "offsetY": { "$ref": "#/definitions/dimensionValue" },
                "blur": { "$ref": "#/definitions/dimensionValue" },
                "spread": { "$ref": "#/definitions/dimensionValue" },
                "color": { "$ref": "#/definitions/colorValue" },
                "inset": { "type": "boolean" }
              }
            }
          },
          {
            "type": "string",
            "pattern": "^([0-9]+(\\.[0-9]+)?(px|rem) [0-9]+(\\.[0-9]+)?(px|rem) [0-9]+(\\.[0-9]+)?(px|rem) [0-9]+(\\.[0-9]+)?(px|rem) (#[A-Fa-f0-9]{6}|rgba?\\([0-9]+, ?[0-9]+, ?[0-9]+(, ?[0-9]+(\\.[0-9]+)?)?\\))( inset)?)(, ?[0-9]+(\\.[0-9]+)?(px|rem) [0-9]+(\\.[0-9]+)?(px|rem) [0-9]+(\\.[0-9]+)?(px|rem) [0-9]+(\\.[0-9]+)?(px|rem) (#[A-Fa-f0-9]{6}|rgba?\\([0-9]+, ?[0-9]+, ?[0-9]+(, ?[0-9]+(\\.[0-9]+)?)?\\))( inset)?)*$"
          }
        ]
      },
      "typographyValue": {
        "type": "object",
        "description": "Typography value",
        "required": ["fontFamily", "fontSize", "fontWeight"],
        "properties": {
          "fontFamily": { 
            "type": "string",
            "description": "Font family name or stack" 
          },
          "fontSize": { 
            "$ref": "#/definitions/dimensionValue",
            "description": "Font size with unit" 
          },
          "fontWeight": { 
            "oneOf": [
              { "type": "number", "minimum": 100, "maximum": 900, "multipleOf": 100 },
              { "type": "string", "enum": ["normal", "bold", "lighter", "bolder"] }
            ],
            "description": "Font weight as number or keyword"
          },
          "lineHeight": { 
            "oneOf": [
              { "type": "number" },
              { "$ref": "#/definitions/dimensionValue" }
            ],
            "description": "Line height as unitless number or with unit"
          },
          "letterSpacing": { 
            "$ref": "#/definitions/dimensionValue",
            "description": "Letter spacing with unit" 
          },
          "textDecoration": { 
            "type": "string",
            "enum": ["none", "underline", "line-through", "overline"],
            "description": "Text decoration style"
          },
          "textTransform": { 
            "type": "string",
            "enum": ["none", "capitalize", "uppercase", "lowercase"],
            "description": "Text transformation style"
          }
        }
      },
      "borderValue": {
        "type": "object",
        "description": "Border value",
        "oneOf": [
          {
            "required": ["width", "style", "color"],
            "properties": {
              "width": { "$ref": "#/definitions/dimensionValue" },
              "style": { 
                "type": "string",
                "enum": ["solid", "dashed", "dotted", "double", "groove", "ridge", "inset", "outset", "none"] 
              },
              "color": { "$ref": "#/definitions/colorValue" }
            }
          },
          {
            "type": "string",
            "pattern": "^[0-9]+(\\.[0-9]+)?(px|rem) (solid|dashed|dotted|double|groove|ridge|inset|outset|none) (#[A-Fa-f0-9]{6}|rgba?\\([0-9]+, ?[0-9]+, ?[0-9]+(, ?[0-9]+(\\.[0-9]+)?)?\\))$"
          }
        ]
      },
      "PropertyType": {
        "type": "object",
        "description": "A property type that can be applied to a token.",
        "required": ["id", "displayName", "compatibleValueTypes"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the property type."
          },
          "displayName": {
            "type": "string",
            "description": "Human-readable name for the property type."
          },
          "category": {
            "type": "string",
            "description": "Category this property belongs to.",
            "enum": ["color", "typography", "spacing", "dimension", "effect", "border", "layout", "animation"]
          },
          "compatibleValueTypes": {
            "type": "array",
            "description": "List of resolved value types that can be used with this property.",
            "items": { "type": "string" }
          },
          "platformMappings": {
            "type": "object",
            "description": "Platform-specific property mappings.",
            "properties": {
              "css": {
                "type": "array",
                "items": { "type": "string" },
                "description": "CSS property names"
              },
              "figma": {
                "type": "array",
                "items": { "type": "string" },
                "description": "Figma scopes"
              },
              "ios": {
                "type": "array",
                "items": { "type": "string" },
                "description": "iOS/SwiftUI property names"
              },
              "android": {
                "type": "array",
                "items": { "type": "string" },
                "description": "Android property names"
              }
            }
          },
          "defaultUnit": {
            "type": "string",
            "description": "Default unit for this property type (if applicable)."
          },
          "inheritance": {
            "type": "boolean",
            "description": "Whether this property supports inheritance.",
            "default": false
          }
        }
      }
    }
}