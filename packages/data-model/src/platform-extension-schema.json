{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://designsystem.org/schemas/platform-extension/v1.0.0",
  "title": "Platform Extension Schema",
  "description": "Schema for platform-specific extensions and overrides",
  "type": "object",
  "required": ["systemId", "platformId", "version", "figmaFileKey"],
  "properties": {
    "systemId": {
      "type": "string",
      "description": "ID of the core system this extension belongs to"
    },
    "platformId": {
      "type": "string",
      "description": "ID of the platform this extension is for"
    },
    "version": {
      "type": "string",
      "description": "Version of this platform extension"
    },
    "status": {
      "type": "string",
      "enum": ["active", "deprecated"],
      "description": "Lifecycle status of this platform extension",
      "default": "active"
    },
    "figmaPlatformMapping": {
      "type": "string",
      "enum": ["WEB", "iOS", "ANDROID"],
      "description": "Maps this platform extension to a specific Figma platform for variable export",
      "nullable": true
    },
    "figmaFileKey": {
      "type": "string",
      "description": "Unique Figma file key for this platform extension. Must be unique across all platform extensions and cannot be overridden.",
      "pattern": "^[a-zA-Z0-9-_]+$"
    },
    "syntaxPatterns": {
      "type": "object",
      "description": "Platform-specific syntax patterns (not for Figma)",
      "properties": {
        "prefix": { "type": "string" },
        "suffix": { "type": "string" },
        "delimiter": { "type": "string", "enum": ["", "_", "-", ".", "/"] },
        "capitalization": { "type": "string", "enum": ["camel", "uppercase", "lowercase", "capitalize"] },
        "formatString": { "type": "string" }
      }
    },
    "valueFormatters": {
      "type": "object",
      "description": "Platform-specific value formatting rules",
      "properties": {
        "color": { "type": "string", "enum": ["hex", "rgb", "rgba", "hsl", "hsla"] },
        "dimension": { "type": "string", "enum": ["px", "rem", "em", "pt", "dp", "sp"] },
        "numberPrecision": { "type": "integer", "minimum": 0, "maximum": 10 }
      }
    },
    "algorithmVariableOverrides": {
      "type": "array",
      "description": "Platform-specific algorithm variable overrides (variables only, not formulas)",
      "items": {
        "type": "object",
        "required": ["algorithmId", "variableId", "valuesByMode"],
        "properties": {
          "algorithmId": { "type": "string" },
          "variableId": { "type": "string" },
          "valuesByMode": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["modeIds", "value"],
              "properties": {
                "modeIds": { "type": "array", "items": { "type": "string" } },
                "value": { "oneOf": [{ "type": "string" }, { "type": "number" }, { "type": "boolean" }] }
              }
            }
          }
        }
      }
    },
    "tokenOverrides": {
      "type": "array",
      "description": "Platform-specific token overrides and additions",
      "items": {
        "type": "object",
        "required": ["id", "valuesByMode"],
        "properties": {
          "id": { "type": "string", "description": "Token ID (matches core or is new for platform)" },
          "displayName": { "type": "string" },
          "description": { "type": "string" },
          "themeable": { "type": "boolean" },
          "private": { "type": "boolean" },
          "status": { "type": "string" },
          "tokenTier": { "type": "string" },
          "resolvedValueTypeId": { "type": "string" },
          "generatedByAlgorithm": { "type": "boolean" },
          "algorithmId": { "type": "string" },
          "taxonomies": { "type": "array", "items": { "type": "object" } },
          "propertyTypes": { "type": "array", "items": { "type": "object" } },
          "codeSyntax": { "type": "array", "items": { "type": "object" } },
          "valuesByMode": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["modeIds", "value"],
              "properties": {
                "modeIds": { "type": "array", "items": { "type": "string" } },
                "value": {
                  "oneOf": [
                    { "type": "object", "required": ["value"], "properties": { "value": {} } },
                    { "type": "object", "required": ["tokenId"], "properties": { "tokenId": { "type": "string" } } }
                  ]
                },
                "metadata": { "type": "object" }
              }
            }
          },
          "omit": { "type": "boolean", "description": "If true, this token is omitted from the platform" }
        }
      }
    },
    "omittedModes": {
      "type": "array",
      "description": "List of mode IDs omitted from this platform (hidden, not deleted)",
      "items": { "type": "string" }
    },
    "omittedDimensions": {
      "type": "array",
      "description": "List of dimension IDs omitted from this platform (hidden, not deleted)",
      "items": { "type": "string" }
    },
    "packageUri": {
      "type": "string",
      "description": "NPM, GitHub, or Storybook URL for the platform extension"
    },
    "documentationUri": {
      "type": "string",
      "description": "Documentation URL for the platform extension"
    },
    "componentImplementations": {
      "type": "array",
      "description": "How this platform implements component contracts",
      "items": {
        "type": "object",
        "required": ["componentId", "componentName"],
        "properties": {
          "componentId": {
            "type": "string",
            "description": "Contract this implements (optional for platform-only components)"
          },
          "componentName": {
            "type": "string",
            "description": "Platform component name (defaults to component name from contract within the UI)"
          },
          "description": {
            "type": "string",
            "description": "Platform-specific description of this component implementation"
          },
          "componentCategoryId": {
            "type": "string",
            "description": "Category this component belongs to (optional, defaults to 'other')"
          },
          "packageName": {
            "type": "string",
            "description": "NPM package name for this component (optional, defaults to platform name)"
          },
          "storybookStory": {
            "type": "string",
            "description": "Link to Storybook story for this component (optional)"
          },
          "playgroundUrl": {
            "type": "string",
            "description": "Link to interactive playground for this component (optional)"
          },
          "status": {
            "type": "string",
            "enum": ["experimental", "stable", "deprecated"],
            "description": "Status of this component implementation"
          },
          "imageUrl": {
            "type": "string",
            "description": "Optional image URL for this component (e.g., screenshot or icon)"
          },
          "tokenUsage": {
            "type": "array",
            "description": "How this component uses tokens (for documentation/UI generation)",
            "items": {
              "type": "object",
              "required": ["attribute", "tokenTypes"],
              "properties": {
                "attribute": {
                  "type": "string",
                  "description": "Platform-specific attribute name"
                },
                "tokenTypes": {
                  "type": "array",
                  "items": { "type": "string" },
                  "description": "Types of tokens this attribute accepts"
                },
                "defaultTokenId": {
                  "type": "string",
                  "description": "Default token ID for this attribute (optional)"
                },
                "description": {
                  "type": "string",
                  "description": "Description of how this attribute uses tokens"
                }
              }
            }
          },
          "examples": {
            "type": "object",
            "description": "Links to live examples and documentation",
            "properties": {
              "storybookId": {
                "type": "string",
                "description": "Storybook story ID for this component"
              },
              "documentationUri": {
                "type": "string",
                "description": "Component-specific documentation URL"
              },
              "codeExample": {
                "type": "string",
                "description": "Code example for this component"
              }
            }
          }
        }
      }
    }
  }
} 