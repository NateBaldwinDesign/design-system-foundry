{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "https://designsystem.org/schemas/algorithms/v5.0.0",
    "title": "Algorithm Schema for Design Token Generation",
    "description": "Schema for algorithmic design token generation with support for multiple expression formats",
    "type": "object",
    "properties": {
      "schemaVersion": {
        "type": "string",
        "description": "Schema version",
        "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-.*)?(?:\\+.*)?"
      },
      "profile": {
        "type": "string",
        "enum": ["basic", "standard", "advanced"],
        "default": "basic",
        "description": "Complexity profile determining available features and validation strictness"
      },
      "metadata": {
        "type": "object",
        "description": "Metadata for the algorithm collection",
        "properties": {
          "name": { "type": "string", "description": "Collection name" },
          "description": { "type": "string", "description": "Collection description" },
          "author": { "type": "string", "description": "Author name" },
          "version": { "type": "string", "description": "Collection version" }
        },
        "required": ["name", "version"]
      },
      "config": {
        "type": "object",
        "description": "Global configuration values and system variables used across algorithms.",
        "properties": {
          "systemVariables": {
            "type": "array",
            "description": "System variables that can be referenced by algorithms.",
            "items": {
              "type": "object",
              "required": ["id", "name", "type"],
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^[a-zA-Z0-9-_]+$",
                  "description": "Unique identifier for the system variable"
                },
                "name": {
                  "type": "string",
                  "description": "Human-readable name for the system variable"
                },
                "description": {
                  "type": "string",
                  "description": "Optional description of the system variable's purpose"
                },
                "type": {
                  "type": "string",
                  "enum": ["string", "number", "boolean", "color"],
                  "description": "Data type of the system variable"
                },
                "defaultValue": {
                  "oneOf": [
                    { "type": "string" },
                    { "type": "number" },
                    { "type": "boolean" }
                  ],
                  "description": "Default value for the system variable"
                },
                "constraints": {
                  "type": "object",
                  "description": "Validation constraints for the system variable",
                  "properties": {
                    "min": { "type": "number" },
                    "max": { "type": "number" },
                    "step": { "type": "number" },
                    "pattern": { "type": "string" }
                  }
                },
                "modeBased": {
                  "type": "boolean",
                  "description": "Whether this variable has mode-specific values",
                  "default": false
                },
                "dimensionId": {
                  "type": "string",
                  "pattern": "^[a-zA-Z0-9-_]+$",
                  "description": "ID of the dimension this variable is associated with (required if modeBased is true)"
                },
                "valuesByMode": {
                  "type": "array",
                  "description": "Mode-specific values for this system variable (consistent with token structure)",
                  "items": {
                    "type": "object",
                    "required": ["modeIds", "value"],
                    "properties": {
                      "modeIds": {
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "The mode(s) this value applies to"
                      },
                      "value": {
                        "oneOf": [
                          { "type": "string" },
                          { "type": "number" },
                          { "type": "boolean" }
                        ],
                        "description": "The value for this mode combination"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "additionalProperties": {
          "oneOf": [
            { "type": "string" },
            { "type": "number" },
            { "type": "boolean" }
          ]
        }
      },
      "algorithms": {
        "type": "array",
        "description": "Algorithm definitions",
        "items": {
          "type": "object",
          "required": ["id", "name", "variables", "formulas", "steps", "resolvedValueTypeId"],
          "properties": {
            "id": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9-_]+$",
              "description": "Unique algorithm ID"
            },
            "name": {
              "type": "string",
              "description": "Human-readable algorithm name"
            },
            "description": {
              "type": "string",
              "description": "Description of the algorithm's purpose"
            },
            "resolvedValueTypeId": {
              "type": "string",
              "description": "ID of the resolved value type this algorithm generates (must match an ID from the main schema's resolvedValueTypes array)"
            },
            "variables": {
              "type": "array",
              "description": "Input variables for the algorithm",
              "items": {
                "type": "object",
                "required": ["id", "name", "type"],
                "properties": {
                  "id": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9-_]+$"
                  },
                  "name": { "type": "string" },
                  "type": {
                    "type": "string",
                    "enum": ["number", "string", "boolean", "color"]
                  },
                  "defaultValue": { "type": "string" },
                  "description": { "type": "string" },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "min": { "type": "number" },
                      "max": { "type": "number" },
                      "step": { "type": "number" },
                      "pattern": { "type": "string" }
                    }
                  }
                }
              }
            },
            "formulas": {
              "type": "array",
              "description": "Formulas that define the algorithm's logic",
              "items": {
                "type": "object",
                "required": ["id", "name", "expressions"],
                "properties": {
                  "id": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9-_]+$"
                  },
                  "name": { "type": "string" },
                  "description": { "type": "string" },
                  "expressions": {
                    "type": "object",
                    "required": ["latex", "javascript"],
                    "properties": {
                      "latex": {
                        "type": "object",
                        "required": ["value"],
                        "properties": {
                          "value": { "type": "string" }
                        }
                      },
                      "javascript": {
                        "type": "object",
                        "required": ["value"],
                        "properties": {
                          "value": { "type": "string" },
                          "metadata": {
                            "type": "object",
                            "properties": {
                              "allowedOperations": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": ["math", "color", "dimension"]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "variableIds": {
                    "type": "array",
                    "items": { "type": "string" }
                  }
                }
              }
            },
            "conditions": {
              "type": "array",
              "description": "Conditional logic for the algorithm",
              "items": {
                "type": "object",
                "required": ["id", "name", "expression"],
                "properties": {
                  "id": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9-_]+$"
                  },
                  "name": { "type": "string" },
                  "expression": {
                    "type": "string",
                    "description": "JavaScript expression that evaluates to a boolean"
                  },
                  "variableIds": {
                    "type": "array",
                    "items": { "type": "string" }
                  }
                }
              }
            },
            "steps": {
              "type": "array",
              "description": "Execution steps for the algorithm",
              "items": {
                "type": "object",
                "required": ["type", "id", "name"],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["formula", "condition"]
                  },
                  "id": { "type": "string" },
                  "name": { "type": "string" }
                }
              }
            }
          }
        }
      },
      "execution": {
        "type": "object",
        "description": "Execution configuration",
        "properties": {
          "order": {
            "type": "array",
            "description": "Execution order for algorithms (optional if auto-detected)",
            "items": { "type": "string" }
          },
          "parallel": {
            "type": "boolean",
            "default": false,
            "description": "Enables parallel execution if supported"
          },
          "onError": {
            "type": "string",
            "enum": ["stop", "skip", "warn"],
            "default": "stop",
            "description": "Error handling strategy"
          }
        }
      },
      "integration": {
        "type": "object",
        "description": "Integration settings with the main token schema",
        "properties": {
          "targetSchema": { "type": "string", "description": "URI or path to the target token schema" },
          "outputFormat": {
            "type": "string",
            "enum": ["design-tokens", "custom"],
            "default": "design-tokens",
            "description": "Format for generated tokens"
          },
          "mergeStrategy": {
            "type": "string",
            "enum": ["replace", "merge", "append"],
            "default": "merge",
            "description": "Strategy for handling existing tokens"
          },
          "validation": {
            "type": "boolean",
            "default": true,
            "description": "Whether to validate generated tokens against the target schema"
          }
        }
      },
      "examples": {
        "type": "array",
        "description": "Use case examples for testing and validation",
        "items": {
          "type": "object",
          "required": ["name", "description", "config", "algorithms"],
          "properties": {
            "name": { "type": "string" },
            "description": { "type": "string" },
            "useCase": { "type": "string" },
            "config": { "type": "object", "description": "Complete working configuration" },
            "algorithms": { "type": "array", "description": "List of algorithms", "items": { "type": "object" } },
            "expectedOutput": { "type": "object", "description": "Example output tokens" }
          }
        }
      }
    },
    "required": ["schemaVersion", "algorithms"],
    "additionalProperties": false
  }
  