# AI Assistant Rules for Token Design System

## CRITICAL: Schema as Single Source of Truth

**BEFORE ANY CODE CHANGES:** Always check `@schema.json` first. All code must derive from this schema.

### Schema Compliance Rules
- `@schema.json` is the ONLY source of truth for data models, validation, and application logic
- `@index.ts` MUST mirror `@schema.json` exactly (except TypeScript-specific syntax)
- NEVER create new models, keys, or properties if they exist in `@schema.json`
- ALWAYS evaluate schema impact before making changes and include impact assessment in response

### Required Schema Analysis
When making any change, explicitly state:
1. Which schema elements are affected
2. Whether the change maintains schema compliance
3. If schema updates are needed

## Core Domain Concepts (Follow These Definitions)

1. **Resolved Value Type**: UI-compatible value types (`color`, `font`, `gap`, `shadow`)
2. **Dimensions**: Mutually exclusive mode groups with common themes
3. **Modes**: Specific options within a single dimension (never repeated across dimensions)
4. **Token Collections**: Flexible grouping system supporting multiple resolved value types
5. **Aliases**: Tokens referencing other tokens (inherit referenced token's resolved value type)

### Schema-Specific Technical Decisions (MANDATORY)

#### ID and Reference Naming
- **SINGLE REFERENCES**: Always use `Id` suffix (e.g., `resolvedValueTypeId`, `tokenCollectionId`)
- **ARRAY REFERENCES**: Always use `Ids` suffix (e.g., `resolvedValueTypeIds`, `supportedDimensionIds`)
- **VALIDATION**: All reference fields must match existing IDs in their respective arrays

#### Value Type System
- **SOURCE OF TRUTH**: `resolvedValueTypes` array at schema root defines all valid types
- **REFERENCE PATTERN**: Use `resolvedValueTypeId` (string) to reference `resolvedValueTypes[].id`
- **NO DIRECT ENUMS**: Never use UPPER_CASE type values directly (e.g., "COLOR") - always reference by ID
- **OPTIONAL TYPE FIELD**: `resolvedValueTypes[].type` is optional UPPER_CASE for standards compliance

#### Token Value Structure
- **DIRECT VALUES**: `{ "value": <actual_value> }` - type determined by token's `resolvedValueTypeId`
- **ALIAS VALUES**: `{ "tokenId": "referenced-token-id" }` - inherits referenced token's type
- **NO REDUNDANT TYPE**: Never add `resolvedValueTypeId` to individual values in `valuesByMode`

#### Platform Code Syntax
- **ARRAY STRUCTURE**: `codeSyntax` is always an array of `{ platformId, formattedName }` objects
- **NO OBJECT MAPS**: Never use platform names as object keys
- **REFERENCE BY ID**: Always reference platforms by their `platformId`

#### Dimension Migration Rules
- **DEFAULT MODE ONLY**: Always use dimension's `defaultMode` for "Map to Defaults" - no arbitrary mapping
- **PRESERVE VALUES**: Always preserve original values during migration - never reset or discard
- **NO MIGRATION OPTIONS**: Don't create UI for "Map Empty modeIds To" or "Preserve Original Values" toggles

## GitHub Integration Rules (MANDATORY)

### Authentication & Security
- **OAUTH FLOW**: Use PKCE (Proof Key for Code Exchange) for secure OAuth 2.0 authentication
- **TOKEN STORAGE**: Store GitHub tokens in `SecureStorage` service, never in localStorage directly
- **STATE VALIDATION**: Always validate OAuth state parameter to prevent CSRF attacks
- **TOKEN REFRESH**: Implement automatic token refresh monitoring with exponential backoff
- **SCOPE MANAGEMENT**: Request minimal required scopes (`repo`, `user`) for GitHub API access
- **ERROR HANDLING**: Provide clear error messages for authentication failures with retry options

### API Service Architecture
- **SERVICE LAYER**: Use `GitHubApiService` as the single point for all GitHub API operations
- **REPOSITORY NAMES**: Always use full repository names (`owner/repo`) in API calls, never just repo names
- **HEADERS**: Include required headers: `Authorization: token ${accessToken}`, `Accept: application/vnd.github.v3+json`
- **ERROR HANDLING**: Wrap all API calls with try-catch and provide meaningful error messages
- **RATE LIMITING**: Respect GitHub API rate limits and implement appropriate retry logic
- **PAGINATION**: Handle paginated responses for repositories and other list endpoints

### Caching Strategy
- **CACHE SERVICE**: Use `GitHubCacheService` for caching organizations, repositories, and branches
- **TTL CONFIGURATION**: Set appropriate TTL values (organizations: 10min, repositories: 5min, branches: 2min)
- **CACHE VALIDATION**: Always check cache validity before using cached data
- **CACHE INVALIDATION**: Clear cache when data is updated or when user requests refresh
- **STORAGE MANAGEMENT**: Handle localStorage quota limits with automatic cleanup of expired entries

### Data Loading & Storage Workflows
- **REPOSITORY SELECTION**: Use `GitHubRepoSelector` component for repository and file selection
- **FILE VALIDATION**: Validate JSON files against schema before loading into application
- **STORAGE INTEGRATION**: Load GitHub data into `StorageService` and update application state
- **ROOT DATA PRESERVATION**: Always preserve root-level metadata (systemName, systemId, description, version)
- **EVENT DISPATCH**: Dispatch `github:file-loaded` event when GitHub data is successfully loaded
- **STATE MANAGEMENT**: Update GitHub connection state in main App component after data loading

### Save & Commit Workflows
- **SAVE SERVICE**: Use `GitHubSaveService` for all save operations with support for direct commits and pull requests
- **FILE SIZE VALIDATION**: Check file size against GitHub's 1MB limit before saving
- **BRANCH MANAGEMENT**: Support both direct saves to current branch and pull request workflows
- **COMMIT MESSAGES**: Generate descriptive commit messages with timestamps and context
- **PULL REQUEST CREATION**: Create feature branches with unique names and comprehensive PR descriptions
- **CONFLICT HANDLING**: Implement retry logic with fresh SHA fetches for 409 conflicts

### Repository Structure & File Management
- **FILE TYPES**: Support both schema files (core data) and theme-override files
- **DIRECTORY SCANNING**: Recursively scan repositories for valid JSON files
- **FILE IDENTIFICATION**: Use schema validation to identify file types (schema vs theme-override)
- **MAPPING FILES**: Store external service mappings (e.g., Figma) in `.figma/mappings/{fileKey}.json`
- **DIRECTORY CREATION**: Scaffold directories as needed when creating new files

### Error Handling & User Experience
- **LOADING STATES**: Show appropriate loading indicators for each step of GitHub operations
- **TOAST NOTIFICATIONS**: Use Chakra UI toast notifications for success, error, and warning messages
- **RETRY MECHANISMS**: Provide retry options for failed operations with clear error context
- **CACHE REFRESH**: Allow users to manually refresh cached data when needed
- **CONNECTION STATUS**: Display current GitHub connection status and selected repository info
- **FILE SIZE WARNINGS**: Warn users when files approach GitHub's size limits

### Integration Patterns
- **SERVICE COMPOSITION**: Compose services (Auth → API → Cache → Save) for complex workflows
- **EVENT-DRIVEN UPDATES**: Use custom events to notify components of GitHub state changes
- **LOCALSTORAGE PERSISTENCE**: Store repository selection and connection state in localStorage
- **COMPONENT REUSE**: Reuse existing GitHub components (`GitHubRepoSelector`, `GitHubSaveDialog`) for new features
- **CONFIGURATION**: Use centralized GitHub configuration from `config/github.ts`

### Component Development
- **FIRST**: Search `/src/packages/design-system-data-manager/` for existing components
- **USE**: Existing components like `@TokenTag.tsx` before creating new ones
- **NEW COMPONENTS**: Use Chakra-UI v2 only
- **REFERENCE**: https://chakra-ui.com/llms-components.txt and https://chakra-ui.com/llms-styling.txt
- **UI CONTROLS**: Always use Chakra UI `Select` component for dropdowns/filters - never custom or native HTML selects
- **UI MAPPING**: Assign mapping logic to constants above return statement, not inline in JSX (unless performance requires memoization)

### Data Handling Rules
- **CONSISTENT PROPS**: Use identical property names and types across component chains
- **EXAMPLE**: If passing `value: { value: "#000000" }`, maintain this structure throughout the component tree
- **ID NAMING CONVENTION**: ALL reference fields MUST use `Id` suffix (single) or `Ids` suffix (arrays)
  - Examples: `resolvedValueTypeId`, `tokenCollectionId`, `supportedDimensionIds`, `resolvedValueTypeIds`
- **VALUE TYPE REFERENCES**: Always use `resolvedValueTypeId` (string) to reference the `id` field in `resolvedValueTypes` array
- **NO ENUM TYPES**: Never use UPPER_CASE enum values directly - always reference by string ID

### UI Architecture & Navigation
- **TOP-LEVEL VIEWS**: Each view in `src/views/{Name}View.tsx` (e.g., `TokensView`, `SetupView`)
- **VIEW COMPONENTS**: Default export functional components
- **ALL UI PRIMITIVES**: Use Chakra UI components (`Select`, `Button`, `Box`, `FormControl`)
- **DROPDOWNS/FILTERS**: Always use Chakra UI `Select` - never custom or native HTML selects
### Display Name Requirements
- **GLOBAL DATA**: Always pass complete, current lists of modes/dimensions/tokens/platforms etcetera to components
- **LOOKUP PATTERN**: Use list-based lookups for all display names
- **FALLBACK**: Show "Unknown {data type} ({id})" for missing IDs + log warning
- **VALIDATION**: Verify all referenced IDs exist in global lists on data load/save

### Data Validation & Integrity
- **ALL MUTATIONS**: Validate complete data object against schema before state updates
- **VALIDATION SERVICE**: Use ValidationService as single point of schema validation
- **ERROR HANDLING**: Show clear, actionable error messages via Chakra UI toast notifications
- **PREVENT INVALID CHANGES**: Block mutations that would create invalid data
- **THEME OVERRIDES**: Always merge with complete core data to ensure schema compliance
- **REFERENTIAL INTEGRITY**: Verify all referenced IDs exist during mutations and loads
- **ALL INPUTS**: Validate against schema constraints before saving
- **REFERENTIAL INTEGRITY**: Verify all IDs and relationships (modeIds, taxonomyIds) exist
- **DIALOG PATTERN**: Stage changes in local state, only commit on explicit user save/apply

### File Management
- **REFACTORING**: Never delete original files until new location is verified and working
- **MIGRATION**: Complete content transfer before cleanup

### Secrets
- Document secrets in a modular and abstract way that will not be interpreted as a secret in git
- In documentation, use placeholders like <YOUR_FIGMA_ACCESS_TOKEN>
- If hints are helpful for users or the system to know if they have the correct secret, it's ok to document things like "prefixed by `figd_` and 64 characters long"

### Figma transformation and API
- **DAISY-CHAINING**: Reference `/packages/data-transformations/docs/daisy-chaining-strategy.md` when daisy-chaining single and multi-dimensional tokens
- **MODE ID PERSISTENCE**: Reference `/packages/data-transformations/docs/mode-id-persistence-solution.md` for mode ID creation and management
- **VARIABLE COLLECTION IDS**: Reference `/packages/data-transformations/docs/variable-collection-id-fix.md` for how to handle collection ids.
- **TEMP TO REAL / FIGMA IDS**: When creating, referencing, or managing IDs for Figma API always reference `/packages/data-transformations/docs/temp-to-real-id-workflow-fix.md`
- **TROUBLESHOOTING**: Reference `/packages/design-data-system-manager/docs/figma-troubleshooting.md ` for common Figma transformation and API errors

### Repository scaffolding
- **SCRIPT-BASED FILE AND DIRECTORY CREATION**: Reference `/packages/design-data-system-manager/docs/repository-scaffolding.md` for repository and directory structure
- Always ask to confirm directories and file names or locations before creating them


### Code Quality Standards
- Write modular, well-commented code
- Add inline comments for human comprehension
- Prioritize clarity and reusability
- Check `@technical-decisions.md` before making architectural decisions
- Use pnpm for package and workspace management

## AI Agent Investigation & Problem-Solving Standards

### **INVESTIGATIVE APPROACH**
- **ALWAYS perform secondary analysis** - Even when the "obvious" solution seems clear, investigate deeper to find the root cause
- **Trace the complete data flow** - Follow every step from user action to final result, don't assume intermediate steps work
- **Question assumptions** - If something "should work" but doesn't, investigate why the assumption is wrong
- **Look for missing dependencies** - When components fail, check if all required providers, imports, and dependencies are present
- **Examine error stack traces completely** - Don't just read the first line, trace through the entire call stack to understand the failure point

### **THOROUGHNESS REQUIREMENTS**
- **Evaluate impact on ALL system components** - Every change affects multiple parts of the system
- **Check for circular dependencies** - React Context, hooks, and component hierarchies can create circular references
- **Verify data flow integrity** - Ensure data passes correctly through all layers: UI → Handlers → Services → Context → UI
- **Test the complete user journey** - Don't just fix the immediate error, ensure the entire workflow functions
- **Consider edge cases** - What happens when data is null, undefined, or in unexpected formats?

### **PREVENTATIVE MEASURES**
- **Before implementing any fix:**
  1. Identify ALL components that will be affected
  2. Check for existing dependencies and imports
  3. Verify the component hierarchy and provider structure
  4. Ensure no circular dependencies will be created
  5. Test the complete data flow path
  6. Ensure it is the simplest form of the solution possible
  7. Ensure it is NOT overly verbose or complicated

- **When modifying React Context or Providers:**
  1. Verify ALL components using the context are properly wrapped
  2. Check that provider hierarchy is correct (parent → child order)
  3. Ensure hooks are only called within provider scope
  4. Validate that context values are properly passed down

- **When changing component structure:**
  1. Update ALL import statements
  2. Verify ALL prop interfaces match
  3. Check that event handlers are properly connected
  4. Ensure state management flows correctly

### **ROOT CAUSE ANALYSIS METHODOLOGY**
1. **Start with the error message** - Read it completely, understand what it's telling you
2. **Trace the call stack** - Follow the error through the component hierarchy
3. **Identify the missing piece** - What dependency, provider, or connection is missing?
4. **Check the data flow** - Is data being passed correctly through all layers?
5. **Verify the fix addresses the root cause** - Don't just patch symptoms

### **QUALITY ASSURANCE CHECKLIST**
Before considering any fix complete:
- [ ] Error is resolved without creating new errors
- [ ] All related functionality still works
- [ ] Data flows correctly through the entire system
- [ ] No console errors or warnings remain
- [ ] User can complete the intended workflow
- [ ] Performance is not degraded
- [ ] Code follows existing patterns and conventions
- [ ] SOLUTION IS THE SIMPLEST IT CAN POSSIBLY BE

### **COMMON FAILURE PATTERNS TO AVOID**
- **Context Provider Missing** - Components using hooks must be wrapped in appropriate providers
- **Circular Dependencies** - Components importing each other or creating dependency loops
- **Incomplete Data Flow** - Data being generated but not properly passed to UI components
- **Assumption-Based Fixes** - Implementing solutions without understanding the actual problem
- **Symptom Patching** - Fixing error messages without addressing underlying causes

## AI Prompt Context
- **FOCUS ANY SOLUTION/RESPONSE TO SPECIFIC CONTEXT PROVIDED IN PROMPT**. Do not implement changes outside of this context.
- **RETAIN PRIOR CONTEXT**. For successive chat prompts, if no specific context given in a prompt, maintain focused context on prior context that was provided.

## Solution Constraints
- **MINIMAL VIABLE FIX FIRST**. Address the immediate issue with the smallest possible change before considering broader improvements.
- **PRESERVE EXISTING ARCHITECTURE**. Do not refactor, restructure, or modify existing code patterns unless explicitly requested or directly necessary for the fix.
- **MAINTAIN CURRENT DEPENDENCIES**. Do not add, remove, or update dependencies unless the specific issue cannot be resolved otherwise.

## Change Boundaries
- **MODIFY ONLY FAILING CODE**. If an error points to specific files/functions, limit changes to those areas unless the root cause is definitively elsewhere.
- **PRESERVE WORKING SYSTEMS**. Do not alter build scripts, configuration files, or tooling unless they are the direct cause of the reported issue.
- **KEEP EXISTING PATTERNS**. Match the current code style, naming conventions, and architectural patterns in the project.

## Response Protocol
- **EXPLAIN THE TARGETED APPROACH**. State what specific issue you're addressing and why your solution is focused on that area.
- **IDENTIFY SCOPE BOUNDARIES**. Explicitly mention what you are NOT changing and why.
- **SUGGEST FOLLOW-UP SEPARATELY**. If you notice broader improvements, mention them as separate suggestions after solving the immediate problem.

## AI Response Format

For every response involving code changes, include:

1. **Schema Impact Assessment**: Which schema elements are affected
2. **UI Impact from Schema Updates**: Which elements of the UI will be affected by a schema change
3. **Component Reuse Check**: What existing components were evaluated
4. **Validation Plan**: How new code will be validated against schema
5. **UI Organization**: How the change aligns with user-friendly organization

## Forbidden Actions
- Creating data models outside of `@schema.json`
- Maintaining or translating from other data models to or from `@schema.json` within individual components
- Using partial or filtered data lists for display names
- Making API/property changes that conflict with schema
- Assuming relationships not explicitly defined in schema
- Deleting files during refactoring before verification
- **Using UPPER_CASE enum values directly instead of string ID references**
- **Adding `resolvedValueTypeId` fields to individual token values**
- **Using object maps for `codeSyntax` instead of array structure**
- **Creating reference fields without `Id`/`Ids` suffix**
- **Referencing value types by anything other than their string `id`**
- **Using custom or native HTML selects instead of Chakra UI `Select`**
- **Inlining UI mapping logic in JSX (use constants above return)**
- **Creating migration UI with arbitrary mapping or value reset options**
- **Making mutations without schema validation via ValidationService**
- Creating secrets in code, documentation, or commit messages (which would be flagged by git)
- Creating "dummy" secrets in code, documentation, or commit messages
- **Using repository names without owner prefix in GitHub API calls**
- **Storing GitHub tokens directly in localStorage instead of SecureStorage**
- **Skipping OAuth state validation in authentication flows**
- **Making GitHub API calls without proper error handling and retry logic**
- **Ignoring file size limits when saving to GitHub**
- **Creating GitHub integration features without considering caching strategy**

## Quick Reference Checklist
Before suggesting any code:
- [ ] Checked `@schema.json` for existing definitions
- [ ] Searched for reusable components
- [ ] Planned validation against schema constraints
- [ ] Considered display name lookup requirements
- [ ] Assessed impact on existing relationships
- [ ] **Verified all reference fields use `Id`/`Ids` suffix**
- [ ] **Confirmed value type references use string IDs, not enums**
- [ ] **Checked token value structure (direct value vs alias)**
- [ ] **Validated platform code syntax uses array structure**
- [ ] **Ensured UI controls use Chakra UI components**
- [ ] **Planned UI mapping logic as constants, not inline JSX**
- [ ] **Included ValidationService for all mutations**
- [ ] **Considered toast notifications for user feedback**
- [ ] **Verified GitHub API calls use full repository names (owner/repo)**
- [ ] **Ensured GitHub tokens are stored in SecureStorage**
- [ ] **Implemented proper error handling and retry logic for GitHub operations**
- [ ] **Checked file size limits before GitHub saves**
- [ ] **Planned caching strategy for GitHub data**
- [ ] **Planned UI mapping logic as constants, not inline JSX**
- [ ] **Included ValidationService for all mutations**
- [ ] **Considered toast notifications for user feedback**
- [ ] **Considered all aspects of quality assurance checklist**